package templates

var (
	readmeTemplate = `# {{.Application}}

The {{.Application}} is generated by [gogo](https://github.com/dolab/gogo) command.

### Development

<bash>
$ # show gogo helps
$ gogo -h

$ # create a new application
$ gogo new myapp

$ # resolve dependences
$ cd myapp/gogo
$ make

$ # generate controller
$ # NOTE: you should update application.go and add app.Resource("/user", User) route by hand
$ gogo g c user

$ # generate middleware
$ gogo g w session

$ # generate model
$ gogo g m user

$ # run test
$ make

$ # run development server
$ make godev
</bash>

### Custom Server

You can custom Server by implementing interfaces following:

<golang>
// A RequestReceivedHooker represents request received hook interface of server
type RequestReceivedHooker interface {
	RequestReceivedHooks() []hooks.NamedHook
}

// A RequestRoutedHooker represents request routed hook interface of server
type RequestRoutedHooker interface {
	RequestRoutedHooks() []hooks.NamedHook
}

// A ResponseReadyHooker represents response ready for sending data hook interface of server
type ResponseReadyHooker interface {
	ResponseReadyHooks() []hooks.NamedHook
}

// A ResponseAlwaysHooker represents response routed success hook interface of server
type ResponseAlwaysHooker interface {
	ResponseAlwaysHooks() []hooks.NamedHook
}
</golang>

### APP Struct

<bash>
my
├── app                # workdir
│   ├── controllers    # biz
│   ├── middlewares    # custom middlewares of gogo
│   ├── models         # data driver
│   └── protos         # protobuf
├── bin                # go build output of make gopackage
├── config             # config
├── gogo               # auto generated dirs of gogo
│   └── service        # auto generated services from protobuf
├── lib                # third-party packages for local
├── log                # default log output
└── tmp                # tmpdirs
    ├── cache          # file cache
    ├── pids           # run pid if required
    └── sockets        # run socket if required
</bash>
`
)
